version: '3.8'

services:
  # PostgreSQL Database cho shell-config-service
  db:
    image: postgres:13-alpine
    container_name: shell_config_db
    environment:
      POSTGRES_DB: shell_config_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d shell_config_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shell Config Service Backend
  shell-config-service:
    build:
      context: ./services/shell-config-service
      dockerfile: Dockerfile
    container_name: shell_config_service
    environment:
      DATABASE_URL: postgresql://user:password@db:5432/shell_config_db
      PYTHONPATH: /app/src
    ports:
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database cho Kong API Gateway
  kong-database:
    image: postgres:11-alpine
    container_name: kong_db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Migrations
  kong-migrations:
    image: kong:latest
    container_name: kong_migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - backend_network
    restart: "no"

  # Kong API Gateway
  kong:
    image: kong:latest
    container_name: kong_gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    ports:
      - "8000:8000"   # HTTP proxy
      - "8443:8443"   # HTTPS proxy
      - "8002:8001"   # HTTP admin API
      - "8444:8444"   # HTTPS admin API
      - "8003:8002"   # Admin GUI
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Konga - Kong Admin GUI
  konga:
    image: pantsel/konga
    container_name: konga_gui
    environment:
      TOKEN_SECRET: konga-secret-token-2024
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: kong
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

# Named Volumes cho data persistence
volumes:
  db_data:
    driver: local
  kong_db_data:
    driver: local

# Networks
networks:
  backend_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16